Double linked list
Example: Design Browser History https://leetcode.com/problems/design-browser-history/
Code:
  class Listnode():
      def __init__(self,val=0,prev= None,next=None):
          self.val= val
          self.prev= prev   # double lined list
          self.next= next
  
  class BrowserHistory:
      def __init__(self, homepage: str):
          self.curr= Listnode(homepage)
          
      def visit(self, url: str) -> None:
          self.curr.next= Listnode(url,self.curr)
          self.curr= self.curr.next
  
          
      def back(self, steps: int) -> str:
          while self.curr.prev and steps>0: # use self.curr.prev instead of self.curr to ensure self.curr.prev is not none, otherwise the value self.curr wille be uodated as None
              self.curr= self.curr.prev
              steps-=1
          return self.curr.val
  
      def forward(self, steps: int) -> str:
          while self.curr.next and steps>0: # use self.curr.next instead of self.curr
              self.curr= self.curr.next
              steps-=1
          return self.curr.val  
  
  
  # Your BrowserHistory object will be instantiated and called as such:
  # obj = BrowserHistory(homepage)
  # obj.visit(url)
  # param_2 = obj.back(steps)
  # param_3 = obj.forward(steps)


Example: Swap Nodes in Pairs https://leetcode.com/problems/swap-nodes-in-pairs/description/
Code:
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
          dummy= ListNode(0,head)
          prev,curr= dummy,head
  
          while curr and curr.next:
              # save pointers
              nxt= curr.next.next
              second= curr.next
  
              # reverse this pair
              second.next= curr
              curr.next= nxt
              prev.next= second
              
              # update the pointers
              prev= curr
              curr= nxt
          
          return dummy.next

Example: Remove Nth Node From End of List https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/
Code:
  # Definition for singly-linked list.
  # class ListNode:
  #     def __init__(self, val=0, next=None):
  #         self.val = val
  #         self.next = next
  class Solution:
      def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
          dummy= ListNode(0,head)
          left= dummy
          right= head
  
          while right and n>0:
              right=right.next
              n-=1
          
          while right:
              right=right.next
              left=left.next
          
          left.next=left.next.next
  
          return dummy.next




        


        
