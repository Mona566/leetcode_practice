1. 数组是存放在连续内存空间上的相同类型数据的集合；
   数组下标都是从0开始的。
   数组内存空间的地址是连续的
   正是因为数组在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。
   数组的元素是不能删的，只能覆盖。

2. 
| Data Type         | Typical Size                       | Notes                                |
| ----------------- | ---------------------------------- | ------------------------------------ |
| `char`            | 1 byte                             | Used for characters (e.g., `'A'`)    |
| `bool` (C++)      | 1 byte                             | Stores `true` or `false`             |
| `short`           | 2 bytes                            | Short integer                        |
| `int`             | 4 bytes                            | Standard integer                     |
| `long`            | 4 bytes (32-bit), 8 bytes (64-bit) | Depends on system                    |
| `long long`       | 8 bytes                            | Extended integer                     |
| `float`           | 4 bytes                            | Single-precision floating point      |
| `double`          | 8 bytes                            | Double-precision floating point      |
| `long double`     | 8–16 bytes                         | Depends on compiler and architecture |
| `void*` (pointer) | 4 bytes (32-bit), 8 bytes (64-bit) | Size of memory address               |

3. 二分搜索法
   使用前提： 数组为有序数组，同时题目还需强调数组中无重复元素

  Example 1: https://leetcode.com/problems/search-insert-position/  Search Insert Position

 Code:

 class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left= 0
        right= len(nums)-1

        while left<=right:
            middle= left+(right-left)//2
            if nums[middle]>target:
                right= middle-1
            elif nums[middle]<target:
                left= middle+1
            else:
                return middle
        return left  (This is the part I made mistake as I didn't read the problem carefully (it is asked to return the index where it would be if it were inserted in order.))

  
